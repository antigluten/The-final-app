// Generated by view binder compiler. Do not edit!
package com.example.theapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.theapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemDeckBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView deckLearn;

  @NonNull
  public final TextView deckName;

  @NonNull
  public final TextView deckRelearn;

  @NonNull
  public final TextView deckRevise;

  @NonNull
  public final TextView deckTotal;

  private ItemDeckBinding(@NonNull ConstraintLayout rootView, @NonNull TextView deckLearn,
      @NonNull TextView deckName, @NonNull TextView deckRelearn, @NonNull TextView deckRevise,
      @NonNull TextView deckTotal) {
    this.rootView = rootView;
    this.deckLearn = deckLearn;
    this.deckName = deckName;
    this.deckRelearn = deckRelearn;
    this.deckRevise = deckRevise;
    this.deckTotal = deckTotal;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemDeckBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemDeckBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_deck, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemDeckBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deckLearn;
      TextView deckLearn = rootView.findViewById(id);
      if (deckLearn == null) {
        break missingId;
      }

      id = R.id.deckName;
      TextView deckName = rootView.findViewById(id);
      if (deckName == null) {
        break missingId;
      }

      id = R.id.deckRelearn;
      TextView deckRelearn = rootView.findViewById(id);
      if (deckRelearn == null) {
        break missingId;
      }

      id = R.id.deckRevise;
      TextView deckRevise = rootView.findViewById(id);
      if (deckRevise == null) {
        break missingId;
      }

      id = R.id.deckTotal;
      TextView deckTotal = rootView.findViewById(id);
      if (deckTotal == null) {
        break missingId;
      }

      return new ItemDeckBinding((ConstraintLayout) rootView, deckLearn, deckName, deckRelearn,
          deckRevise, deckTotal);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
