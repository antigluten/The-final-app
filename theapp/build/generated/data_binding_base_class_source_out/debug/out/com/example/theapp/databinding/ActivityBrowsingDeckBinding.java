// Generated by view binder compiler. Do not edit!
package com.example.theapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.example.theapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBrowsingDeckBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonBrowsing;

  @NonNull
  public final Button buttonStudy;

  @NonNull
  public final TextView deckLearnBrowsing;

  @NonNull
  public final TextView deckNameBrowsing;

  @NonNull
  public final TextView deckRelearnBrowsing;

  @NonNull
  public final TextView deckReviseBrowsing;

  @NonNull
  public final TextView deckTotalBrowsing;

  @NonNull
  public final LinearLayout linearLayoutBrowsing;

  @NonNull
  public final LinearLayout linearLayoutBrowsingButton;

  @NonNull
  public final RecyclerView recyclerViewCards;

  private ActivityBrowsingDeckBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button buttonBrowsing, @NonNull Button buttonStudy,
      @NonNull TextView deckLearnBrowsing, @NonNull TextView deckNameBrowsing,
      @NonNull TextView deckRelearnBrowsing, @NonNull TextView deckReviseBrowsing,
      @NonNull TextView deckTotalBrowsing, @NonNull LinearLayout linearLayoutBrowsing,
      @NonNull LinearLayout linearLayoutBrowsingButton, @NonNull RecyclerView recyclerViewCards) {
    this.rootView = rootView;
    this.buttonBrowsing = buttonBrowsing;
    this.buttonStudy = buttonStudy;
    this.deckLearnBrowsing = deckLearnBrowsing;
    this.deckNameBrowsing = deckNameBrowsing;
    this.deckRelearnBrowsing = deckRelearnBrowsing;
    this.deckReviseBrowsing = deckReviseBrowsing;
    this.deckTotalBrowsing = deckTotalBrowsing;
    this.linearLayoutBrowsing = linearLayoutBrowsing;
    this.linearLayoutBrowsingButton = linearLayoutBrowsingButton;
    this.recyclerViewCards = recyclerViewCards;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBrowsingDeckBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBrowsingDeckBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_browsing_deck, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBrowsingDeckBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonBrowsing;
      Button buttonBrowsing = rootView.findViewById(id);
      if (buttonBrowsing == null) {
        break missingId;
      }

      id = R.id.buttonStudy;
      Button buttonStudy = rootView.findViewById(id);
      if (buttonStudy == null) {
        break missingId;
      }

      id = R.id.deckLearnBrowsing;
      TextView deckLearnBrowsing = rootView.findViewById(id);
      if (deckLearnBrowsing == null) {
        break missingId;
      }

      id = R.id.deckNameBrowsing;
      TextView deckNameBrowsing = rootView.findViewById(id);
      if (deckNameBrowsing == null) {
        break missingId;
      }

      id = R.id.deckRelearnBrowsing;
      TextView deckRelearnBrowsing = rootView.findViewById(id);
      if (deckRelearnBrowsing == null) {
        break missingId;
      }

      id = R.id.deckReviseBrowsing;
      TextView deckReviseBrowsing = rootView.findViewById(id);
      if (deckReviseBrowsing == null) {
        break missingId;
      }

      id = R.id.deckTotalBrowsing;
      TextView deckTotalBrowsing = rootView.findViewById(id);
      if (deckTotalBrowsing == null) {
        break missingId;
      }

      id = R.id.linearLayoutBrowsing;
      LinearLayout linearLayoutBrowsing = rootView.findViewById(id);
      if (linearLayoutBrowsing == null) {
        break missingId;
      }

      id = R.id.linearLayoutBrowsingButton;
      LinearLayout linearLayoutBrowsingButton = rootView.findViewById(id);
      if (linearLayoutBrowsingButton == null) {
        break missingId;
      }

      id = R.id.recyclerViewCards;
      RecyclerView recyclerViewCards = rootView.findViewById(id);
      if (recyclerViewCards == null) {
        break missingId;
      }

      return new ActivityBrowsingDeckBinding((ConstraintLayout) rootView, buttonBrowsing,
          buttonStudy, deckLearnBrowsing, deckNameBrowsing, deckRelearnBrowsing, deckReviseBrowsing,
          deckTotalBrowsing, linearLayoutBrowsing, linearLayoutBrowsingButton, recyclerViewCards);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
